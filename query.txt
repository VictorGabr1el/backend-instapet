SELECT * FROM "Posts" ORDER BY random() LIMIT 5;


SELECT * FROM "Posts" WHERE user_id != follow_id ORDER BY random() LIMIT 5;


 const post = await User.findByPk(id.userId, {
    include: [
      {
        model: Post,
        attributes: ["post_id", "img_post", "legend", "createdAt"],
        separate: true,
        order: [["createdAt", "DESC"]],
        include: [
          {
            model: Comment,
            attributes: ["comment_id", "content", "createdAt"],
            include: [
              {
                model: User,
                attributes: ["user_id", "avatar", "username", "createdAt"],
              },
            ],
            separate: true,
            order: [["createdAt", "DESC"]],
          },
        ],
      },
      {
        model: Following,
        attributes: ["userId", "idUser", "id"],
        include: [
          {
            model: User,
            attributes: ["user_id", "avatar", "username"],
            include: [
              {
                model: Post,
                include: [
                  {
                    model: Comment,
                    attributes: ["comment_id", "content", "createdAt"],
                    include: [
                      {
                        model: User,
                        attributes: [
                          "user_id",
                          "avatar",
                          "username",
                          "createdAt",
                        ],
                      },
                    ],
                    separate: true,
                    order: [["createdAt", "DESC"]],
                  },
                ],
                attributes: ["post_id", "img_post", "legend", "createdAt"],
                order: [["createdAt", "DESC"]],
              },
            ],
          },
        ],
      },
    ],
    attributes: ["user_id", "avatar", "username"],
  });

  tentar depois associação 
  Following.hasOne(User)
  Following.hasMany(Users)


  ver documentação sequelize v7


install all modules 

npm install bcrypt cors dotenv express jsonwebtoken nodemon sequelize --save pg pg-hstore


corrigir uso do user_id na criação de postagens e comentarios, passar a utilizar o middleware de verificação e então ultilizar o token retornado por ele


testes já realizados com associações :
// const users = await User.findByPk()
  // const post = await Post.findAll({
  //   include: Following,
  // });

  // const post = await Following.findAll({
  //   include: [
  //     {
  //       model: User,
  //       include: [
  //         {
  //           model: Post,
  //           separate: true,
  //           order: [["createdAt", "DESC"]],
  //         },
  //       ],
  //     },
  //   ],
  // });
  // const post = await Following.findAll({
  //   include: User,
  //   where: { userId: 1 },
  // });
  // const post = await Post.findAll({ include: Following });

  // const post = await Following.findAll({ where: { follow_id: 2 } });
  // const post = await Following.findAll({
  //   attributes: ["userId", "following_id", "id"],
  //   include: [
  //     {
  //       model: User,
  //       attributes: ["user_id", "avatar", "username"],
  //       include: [
  //         {
  //           model: Post,
  //           include: [
  //             {
  //               model: Comment,
  //               attributes: ["comment_id", "content", "createdAt"],
  //               include: [
  //                 {
  //                   model: User,
  //                   attributes: ["user_id", "avatar", "username", "createdAt"],
  //                 },
  //               ],
  //             },
  //           ],
  //         },
  //       ],
  //     },
  //     {
  //       model: User,
  //       attributes: ["user_id", "avatar", "username"],
  //       include: [
  //         {
  //           model: Post,
  //           include: [
  //             {
  //               model: Comment,
  //               attributes: ["comment_id", "content", "createdAt"],
  //               include: [
  //                 {
  //                   model: User,
  //                   attributes: ["user_id", "avatar", "username", "createdAt"],
  //                 },
  //               ],
  //               separate: true,
  //               order: [["createdAt", "DESC"]],
  //             },
  //           ],
  //           attributes: ["post_id", "img_post", "legend", "createdAt"],
  //           order: [["createdAt", "DESC"]],
  //         },
  //       ],
  //     },
  //   ],
  // });

  // const post = await User.findByPk(1, {
  //   attributes: ["user_id", "avatar", "username"],
  //   include: [
  //     {
  //       model: Post,
  //       attributes: ["post_id", "img_post", "legend", "createdAt"],
  //       // separate: true,
  //       order: [["createdAt", "DESC"]],
  //       include: [
  //         {
  //           model: Comment,
  //           attributes: ["comment_id", "content", "createdAt"],
  //           // separate: true,
  //           // order: [["createdAt", "DESC"]],
  //           include: [
  //             {
  //               model: User,
  //               attributes: ["user_id", "avatar", "username", "createdAt"],
  //             },
  //           ],
  //         },
  //       ],
  //     },
  //     {
  //       model: Following,
  //       include: [
  //         {
  //           model: User,
  //           attributes: ["user_id", "username"],
  //           order: [["createdAt", "DESC"]],
  //           include: [
  //             {
  //               model: Post,
  //               attributes: ["post_id", "img_post", "legend", "createdAt"],
  //               // order: [["createdAt", "DESC"]],
  //               separate: true,
  //               include: [
  //                 {
  //                   model: Comment,
  //                   attributes: ["comment_id", "content", "createdAt"],
  //                   // separate: true,
  //                   // order: [["createdAt", "DESC"]],
  //                   include: [
  //                     {
  //                       model: User,
  //                       attributes: [
  //                         "user_id",
  //                         "avatar",
  //                         "username",
  //                         "createdAt",
  //                       ],
  //                     },
  //                   ],
  //                 },
  //               ],
  //             },
  //           ],
  //         },
  //       ],
  //     },
  //   ],
  // });
